# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Hanoi.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QPropertyAnimation, QRect, QSequentialAnimationGroup


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(731, 603)
        MainWindow.setStyleSheet("background-color: #deeaee;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        

        self.mile_1 = QtWidgets.QFrame(self.centralwidget)
        self.mile_1.setGeometry(QtCore.QRect(180, 70, 8, 291))
        self.mile_1.setLineWidth(0)
        self.mile_1.setMidLineWidth(5)
        self.mile_1.setFrameShape(QtWidgets.QFrame.VLine)
        self.mile_1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.mile_1.setObjectName("mile_1")

        self.mile_2 = QtWidgets.QFrame(self.centralwidget)
        self.mile_2.setGeometry(QtCore.QRect(360, 70, 8, 291))
        self.mile_2.setLineWidth(0)
        self.mile_2.setMidLineWidth(5)
        self.mile_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.mile_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.mile_2.setObjectName("mile_2")

        self.mile_3 = QtWidgets.QFrame(self.centralwidget)
        self.mile_3.setGeometry(QtCore.QRect(540, 70, 8, 291))
        self.mile_3.setLineWidth(0)
        self.mile_3.setMidLineWidth(5)
        self.mile_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.mile_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.mile_3.setObjectName("mile_3")

        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(90, 350, 551, 12))
        self.line_2.setLineWidth(0)
        self.line_2.setMidLineWidth(9)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")

        self.Automatic_button = QtWidgets.QPushButton(self.centralwidget)
        self.Automatic_button.setGeometry(QtCore.QRect(142, 460, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Automatic_button.setFont(font)
        self.Automatic_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Automatic_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: #F3F4ED;
                                        }
                                        QPushButton::hover{
                                            font-size: 17px;
                                            background-color : #464F41;
                                        }
        
                                        """)
        self.Automatic_button.setDefault(False)
        self.Automatic_button.setFlat(False)
        self.Automatic_button.setObjectName("Automatic_button")
        self.Automatic_button.clicked.connect(self.automatic_animate)

        self.Pause_button = QtWidgets.QPushButton(self.centralwidget)
        self.Pause_button.setGeometry(QtCore.QRect(140, 460, 93, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Pause_button.setFont(font)
        self.Pause_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Pause_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: #F3F4ED;
                                        }
                                        QPushButton::hover{
                                            font-size: 17px;
                                            background-color : #464F41;
                                        }
        
                                        """)
        self.Pause_button.setAutoDefault(False)
        self.Pause_button.setDefault(False)
        self.Pause_button.setFlat(False)
        self.Pause_button.setObjectName("Pause_button")
        self.Pause_button.clicked.connect(self.pause_animate)
        self.Pause_button.setVisible(False)

        self.Resume_button = QtWidgets.QPushButton(self.centralwidget)
        self.Resume_button.setGeometry(QtCore.QRect(260, 460, 93, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Resume_button.setFont(font)
        self.Resume_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Resume_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: #F3F4ED;
                                        }
                                        QPushButton::hover{
                                            font-size: 17px;
                                            background-color : #464F41;
                                        }
        
                                        """)
        self.Resume_button.setAutoDefault(False)
        self.Resume_button.setDefault(False)
        self.Resume_button.setFlat(False)
        self.Resume_button.setObjectName("Pause_button")
        self.Resume_button.clicked.connect(self.resume_animate)
        self.Resume_button.setVisible(False)

        self.Manual_button = QtWidgets.QPushButton(self.centralwidget)
        self.Manual_button.setGeometry(QtCore.QRect(380, 460, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Manual_button.setFont(font)
        self.Manual_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Manual_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: #F3F4ED;
                                        }
                                        QPushButton::hover{
                                            font-size: 17px;
                                            background-color : #464F41;
                                        }
        
                                        """)
        self.Manual_button.setDefault(False)
        self.Manual_button.setFlat(False)
        self.Manual_button.setObjectName("Automatic_button")
        self.Manual_button.clicked.connect(self.manual_animate)

        self.Next_button = QtWidgets.QPushButton(self.centralwidget)
        self.Next_button.setGeometry(QtCore.QRect(380, 460, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Next_button.setFont(font)
        self.Next_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Next_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: #F3F4ED;
                                        }
                                        QPushButton::hover{
                                            font-size: 17px;
                                            background-color : #464F41;
                                        }
        
                                        """)
        self.Next_button.setDefault(False)
        self.Next_button.setFlat(False)
        self.Next_button.setObjectName("Next_button")
        self.Next_button.clicked.connect(self.next_move)
        self.Next_button.setVisible(False)

        self.Restart_button = QtWidgets.QPushButton(self.centralwidget)
        self.Restart_button.setGeometry(QtCore.QRect(380, 510, 93, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Restart_button.setFont(font)
        self.Restart_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Restart_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: #F3F4ED;
                                        }
                                        QPushButton::hover{
                                            transform: scale(0.98)
                                            
                                            background-color : #464F41;
                                        }
        
                                        """)
        self.Restart_button.setAutoDefault(False)
        self.Restart_button.setDefault(False)
        self.Restart_button.setFlat(False)
        self.Restart_button.setObjectName("Restart_button")
        self.Restart_button.clicked.connect(self.restart_animate)

        self.Result_button = QtWidgets.QPushButton(self.centralwidget)
        self.Result_button.setGeometry(QtCore.QRect(260, 510, 93, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Result_button.setFont(font)
        self.Result_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Result_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: #F3F4ED;
                                        }
                                        QPushButton::hover{
                                            font-size: 17px;
                                            background-color : #464F41;
                                        }
        
                                        """)
        self.Result_button.setAutoDefault(False)
        self.Result_button.setDefault(False)
        self.Result_button.setFlat(False)
        self.Result_button.setObjectName("Restart_button")
        self.Result_button.clicked.connect(self.result)

        self.Slow_button = QtWidgets.QPushButton(self.centralwidget)
        self.Slow_button.setGeometry(QtCore.QRect(260, 400, 93, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Slow_button.setFont(font)
        self.Slow_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Slow_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #77D970; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #77D970;
                                            
                                        }
        
                                        """)
        self.Slow_button.setAutoDefault(False)
        self.Slow_button.setDefault(False)
        self.Slow_button.setFlat(False)
        self.Slow_button.setObjectName("Slow_button")
        self.Slow_button.clicked.connect(self.slow)

        self.Normal_button = QtWidgets.QPushButton(self.centralwidget)
        self.Normal_button.setGeometry(QtCore.QRect(380, 400, 93, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Normal_button.setFont(font)
        self.Normal_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Normal_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #FDCA40; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #FDCA40;
                                        }
        
                                        """)
        self.Normal_button.setAutoDefault(False)
        self.Normal_button.setDefault(False)
        self.Normal_button.setFlat(False)
        self.Normal_button.setObjectName("Slow_button")
        self.Normal_button.clicked.connect(self.normal)

        self.Fast_button = QtWidgets.QPushButton(self.centralwidget)
        self.Fast_button.setGeometry(QtCore.QRect(500, 400, 93, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Fast_button.setFont(font)
        self.Fast_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Fast_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #FF3F00; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #FF3F00;
                                            
                                        }
                                        """)
        self.Fast_button.setAutoDefault(False)
        self.Fast_button.setDefault(False)
        self.Fast_button.setFlat(False)
        self.Fast_button.setObjectName("Slow_button")
        self.Fast_button.clicked.connect(self.fast)

        self.One_button = QtWidgets.QPushButton(self.centralwidget)
        self.One_button.setGeometry(QtCore.QRect(140, 400, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.One_button.setFont(font)
        self.One_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.One_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #C8C6C6;
                                            
                                        }
                                        """)
        self.One_button.setAutoDefault(False)
        self.One_button.setDefault(False)
        self.One_button.setFlat(False)
        self.One_button.setObjectName("Slow_button")
        self.One_button.clicked.connect(self.One)

        self.Two_button = QtWidgets.QPushButton(self.centralwidget)
        self.Two_button.setGeometry(QtCore.QRect(170, 400, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Two_button.setFont(font)
        self.Two_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Two_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #C8C6C6;
                                            
                                        }
                                        """)
        self.Two_button.setAutoDefault(False)
        self.Two_button.setDefault(False)
        self.Two_button.setFlat(False)
        self.Two_button.setObjectName("Slow_button")
        self.Two_button.clicked.connect(self.Two)

        self.Three_button = QtWidgets.QPushButton(self.centralwidget)
        self.Three_button.setGeometry(QtCore.QRect(200, 400, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.Three_button.setFont(font)
        self.Three_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Three_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #C8C6C6;
                                            
                                        }
                                        """)
        self.Three_button.setAutoDefault(False)
        self.Three_button.setDefault(False)
        self.Three_button.setFlat(False)
        self.Three_button.setObjectName("Slow_button")
        self.Three_button.clicked.connect(self.Three)

        self.disk_1 = QtWidgets.QFrame(self.centralwidget)
        self.disk_1.setGeometry(QtCore.QRect(110, 320, 151, 21))
        self.disk_1.setStyleSheet("  background-color:#77D970; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_1.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_1.setLineWidth(2)
        self.disk_1.setObjectName("disk_1")
        self.disk_1.setVisible(False)

        self.disk_2 = QtWidgets.QFrame(self.centralwidget)
        self.disk_2.setGeometry(QtCore.QRect(125, 290, 121, 21))
        self.disk_2.setStyleSheet("  background-color:#77D970; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_2.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_2.setLineWidth(2)
        self.disk_2.setObjectName("disk_2")
        self.disk_2.setVisible(False)

        self.disk_3 = QtWidgets.QFrame(self.centralwidget)
        self.disk_3.setGeometry(QtCore.QRect(140, 260, 91, 21))
        self.disk_3.setStyleSheet("  background-color:#77D970; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_3.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_3.setLineWidth(2)
        self.disk_3.setObjectName("disk_3")
        self.disk_3.setVisible(False)

        self.disk_4 = QtWidgets.QFrame(self.centralwidget)
        self.disk_4.setGeometry(QtCore.QRect(295, 320, 141, 21))
        self.disk_4.setStyleSheet("  background-color:#FDCA40; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_4.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_4.setLineWidth(2)
        self.disk_4.setObjectName("disk_4")
        self.disk_4.setVisible(False)

        self.disk_5 = QtWidgets.QFrame(self.centralwidget)
        self.disk_5.setGeometry(QtCore.QRect(310, 290, 111, 21))
        self.disk_5.setStyleSheet("  background-color:#FDCA40; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_5.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_5.setLineWidth(2)
        self.disk_5.setObjectName("disk_5")
        self.disk_5.setVisible(False)

        self.disk_6 = QtWidgets.QFrame(self.centralwidget)
        self.disk_6.setGeometry(QtCore.QRect(325, 260, 81, 21))
        self.disk_6.setStyleSheet("  background-color:#FDCA40; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_6.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_6.setLineWidth(2)
        self.disk_6.setObjectName("disk_6")
        self.disk_6.setVisible(False)

        self.disk_7 = QtWidgets.QFrame(self.centralwidget)
        self.disk_7.setGeometry(QtCore.QRect(480, 320, 131, 21))
        self.disk_7.setStyleSheet("  background-color:#FF3F00; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_7.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_7.setLineWidth(2)
        self.disk_7.setObjectName("disk_7")
        self.disk_7.setVisible(False)

        self.disk_8 = QtWidgets.QFrame(self.centralwidget)
        self.disk_8.setGeometry(QtCore.QRect(495, 290, 101, 21))
        self.disk_8.setStyleSheet("  background-color:#FF3F00; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_8.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_8.setLineWidth(2)
        self.disk_8.setObjectName("disk_8")
        self.disk_8.setVisible(False)

        self.disk_9 = QtWidgets.QFrame(self.centralwidget)
        self.disk_9.setGeometry(QtCore.QRect(510, 260, 71, 21))
        self.disk_9.setStyleSheet("  background-color:#FF3F00; \n"
                                  "  border: none;\n"
                                  "  color: white;\n"
                                  "  text-align: center;\n"
                                  "  text-decoration: none;\n"
                                  "  display: inline-block;\n"
                                  "  font-size: 16px;\n"
                                  "border-radius: 8px;\n"
                                  "color: black\n"
                                  "")
        self.disk_9.setFrameShape(QtWidgets.QFrame.Box)
        self.disk_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.disk_9.setLineWidth(2)
        self.disk_9.setObjectName("disk_9")
        self.disk_9.setVisible(False)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 731, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Hanoi"))
        self.Automatic_button.setText(_translate("MainWindow", "Automatic"))
        self.Pause_button.setText(_translate("MainWindow", "Pause"))
        self.Resume_button.setText(_translate("MainWindow", "Resume"))
        self.Manual_button.setText(_translate("MainWindow", "Manual"))
        self.Next_button.setText(_translate("MainWindow", "Next"))
        self.Restart_button.setText(_translate("MainWindow", "Restart"))
        self.Result_button.setText(_translate("MainWindow", "Result"))
        self.Slow_button.setText(_translate("MainWindow", "Slow"))
        self.Normal_button.setText(_translate("MainWindow", "Normal"))
        self.Fast_button.setText(_translate("MainWindow", "Fast"))
        self.One_button.setText(_translate("MainWindow", "1"))
        self.Two_button.setText(_translate("MainWindow", "2"))
        self.Three_button.setText(_translate("MainWindow", "3"))

    def automatic_animate(self):
        global i
        i = 0
        self.Automatic_button.setVisible(False)
        self.Manual_button.setVisible(False)
        self.Pause_button.setVisible(True)
        self.Resume_button.setVisible(True)

        self.anim = QPropertyAnimation(self.Result_button, b"geometry")
        self.anim.setDirection(700)
        self.anim.setStartValue(QRect(380, 460, 93, 31))
        self.anim.setEndValue(QRect(260, 510, 93, 31))
        self.anim.start()
        self.Result_button.setGeometry(QtCore.QRect(380, 460, 93, 31))
        
        self.anim2 = QPropertyAnimation(self.Restart_button, b"geometry")
        self.anim2.setDirection(700)
        self.anim2.setStartValue(QRect(500, 460, 93, 31))
        self.anim2.setEndValue(QRect(360, 510, 93, 31))
        self.anim2.start()
        self.Result_button.setGeometry(QtCore.QRect(500, 460, 93, 31))


        
        def create_animate(disk, source, destination):
            global help_mile_1
            global help_mile_2
            global help_mile_3
            global speed

            if destination.objectName() == "mile_1":
                y_help = help_mile_1 -1
            elif destination.objectName() == "mile_2":
                y_help = help_mile_2 -1
            else:
                y_help = help_mile_3 -1

            self.a["anim%s" % number] = QPropertyAnimation(disk, b"geometry")
            self.a["anim%s" % number].setDuration(speed)
            self.a["anim%s" % number].setStartValue(QRect(
                source.x() - (source.x() - disk.x()), disk.y(), disk.width(), disk.height()))
            self.a["anim%s" % number].setEndValue(
                QRect(source.x() - (source.x() - disk.x()), 40, disk.width(), disk.height()))
            geometry_help = QtCore.QRect(
                source.x() - (source.x() - disk.x()), 40, disk.width(), disk.height())
            self.group.addAnimation(self.a["anim%s" % number])

            self.a["anim%s" %
                   (number + 1)] = QPropertyAnimation(disk, b"geometry")
            self.a["anim%s" % (number + 1)].setDuration(speed)
            self.a["anim%s" % (number + 1)].setStartValue(geometry_help)
            self.a["anim%s" % (number + 1)].setEndValue(QRect(destination.x() -
                                                              (source.x() - disk.x()), 40, disk.width(), disk.height()))
            geometry_help = QRect(
                destination.x() - (source.x() - disk.x()), 40, disk.width(), disk.height())
            self.group.addAnimation(self.a["anim%s" % (number + 1)])

            self.a["anim%s" %
                   (number + 2)] = QPropertyAnimation(disk, b"geometry")
            self.a["anim%s" % (number + 2)].setDuration(speed)
            self.a["anim%s" % (number + 2)].setStartValue(geometry_help)
            self.a["anim%s" % (number + 2)].setEndValue(QRect(destination.x() - (
                source.x() - disk.x()), 320 - (30*y_help), disk.width(), disk.height()))
            disk.setGeometry(QtCore.QRect(destination.x(
            ) - (source.x() - disk.x()), 320 - (30*y_help) , disk.width(), disk.height()))
            self.group.addAnimation(self.a["anim%s" % (number + 2)])
            

        def ExHanoi(A, B, C, n):
            global help_mile_1
            global help_mile_2
            global help_mile_3
            global akharin_diskaye_mile_1
            global akharin_diskaye_mile_2
            global akharin_diskaye_mile_3     
            global number

            if n == 1:

                if C.objectName() == "mile_1":
                    help_mile_1 -= 1
                if C.objectName() == "mile_2":
                    help_mile_2 -= 1
                if C.objectName() == "mile_3":
                    help_mile_3 -= 1

                if B.objectName() == "mile_1":
                    help_mile_1 += 1
                if B.objectName() == "mile_2":
                    help_mile_2 += 1
                if B.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(C + "->" + B)
                if C.objectName() == "mile_3":
                    if B.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if B.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if C.objectName() == "mile_2":
                    if B.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if B.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if C.objectName() == "mile_1":
                    if B.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if B.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(A + "->" + C)
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if B.objectName() == "mile_1":
                    help_mile_1 -= 1
                if B.objectName() == "mile_2":
                    help_mile_2 -= 1
                if B.objectName() == "mile_3":
                    help_mile_3 -= 1

                if A.objectName() == "mile_1":
                    help_mile_1 += 1
                if A.objectName() == "mile_2":
                    help_mile_2 += 1
                if A.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(B + "->" + A)
                if B.objectName() == "mile_3":
                    if A.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if A.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if B.objectName() == "mile_2":
                    if A.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if A.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if B.objectName() == "mile_1":
                    if A.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if A.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if B.objectName() == "mile_1":
                    help_mile_1 -= 1
                if B.objectName() == "mile_2":
                    help_mile_2 -= 1
                if B.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(B + "->" + C)
                if B.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if B.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if B.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1   
                # print(A + "->" + C)
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
            else:
                ExHanoi(A, B, C, n-1)
                TowerOfHanoi(3*n - 2, C, A, B)
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(A + "->" + C)
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                TowerOfHanoi(3*n - 1, B, A, C)

        def TowerOfHanoi(n, A, B, C):
            global help_mile_1
            global help_mile_2
            global help_mile_3
            global akharin_diskaye_mile_1
            global akharin_diskaye_mile_2
            global akharin_diskaye_mile_3
            global number
            
            if n == 1:
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(A + "->" + C)    
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                return
            TowerOfHanoi(n-1, A, 
            C, B)
            if A.objectName() == "mile_1":
                help_mile_1 -= 1
            if A.objectName() == "mile_2":
                help_mile_2 -= 1
            if A.objectName() == "mile_3":
                help_mile_3 -= 1

            if C.objectName() == "mile_1":
                help_mile_1 += 1
            if C.objectName() == "mile_2":
                help_mile_2 += 1
            if C.objectName() == "mile_3":
                help_mile_3 += 1
            # print(A + "->" + C)
            if A.objectName() == "mile_3":
                if C.objectName() == "mile_2":
                    create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                    akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                    del akharin_diskaye_mile_3[-1]
                if C.objectName() == "mile_1":
                    create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                    akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                    del akharin_diskaye_mile_3[-1]
            if A.objectName() == "mile_2":
                if C.objectName() == "mile_3":
                    create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                    akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                    del akharin_diskaye_mile_2[-1]
                if C.objectName() == "mile_1":
                    create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                    akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                    del akharin_diskaye_mile_2[-1]
            if A.objectName() == "mile_1":
                if C.objectName() == "mile_3":
                    create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                    akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                    del akharin_diskaye_mile_1[-1]
                if C.objectName() == "mile_2":
                    create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                    akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                    del akharin_diskaye_mile_1[-1]
            # global number
            number += 3
            TowerOfHanoi(n-1, B, A, C)

        self.group = QSequentialAnimationGroup()
        global number
        number = 1
        global help_mile_1
        global help_mile_2
        global help_mile_3
        global akharin_diskaye_mile_1
        global akharin_diskaye_mile_2
        global akharin_diskaye_mile_3
        akharin_diskaye_mile_1 = [self.disk_1, self.disk_2, self.disk_3]
        akharin_diskaye_mile_2 = [self.disk_4, self.disk_5, self.disk_6]
        akharin_diskaye_mile_3 = [self.disk_7, self.disk_8, self.disk_9]
        global Tedad
        if Tedad == 3:
            help_mile_1 = 3
            help_mile_2 = 3
            help_mile_3 = 3
            
            
        elif Tedad == 2:
            del akharin_diskaye_mile_1[-1]
            del akharin_diskaye_mile_2[-1]
            del akharin_diskaye_mile_3[-1]
            
            help_mile_1 = 2
            help_mile_2 = 2
            help_mile_3 = 2
        else:
            del akharin_diskaye_mile_1[-1]
            del akharin_diskaye_mile_1[-1]
            del akharin_diskaye_mile_2[-1]
            del akharin_diskaye_mile_2[-1]
            del akharin_diskaye_mile_3[-1]
            del akharin_diskaye_mile_3[-1]          

            help_mile_1 = 1
            help_mile_2 = 1
            help_mile_3 = 1

        self.a = {}
        ExHanoi(self.mile_1, self.mile_2, self.mile_3, Tedad)

        self.disk_1.setGeometry(QtCore.QRect(110, 320, 151, 21))
        self.disk_2.setGeometry(QtCore.QRect(125, 290, 121, 21))
        self.disk_3.setGeometry(QtCore.QRect(140, 260, 91, 21))
        self.disk_4.setGeometry(QtCore.QRect(295, 320, 141, 21))
        self.disk_5.setGeometry(QtCore.QRect(310, 290, 111, 21))
        self.disk_6.setGeometry(QtCore.QRect(325, 260, 81, 21))
        self.disk_7.setGeometry(QtCore.QRect(480, 320, 131, 21))
        self.disk_8.setGeometry(QtCore.QRect(495, 290, 101, 21))
        self.disk_9.setGeometry(QtCore.QRect(510, 260, 71, 21))
        self.group.start()
        


    def manual_animate(self):

        self.Manual_button.setVisible(False)
        self.Next_button.setVisible(True)
        self.Automatic_button.setVisible(False)

        self.anim = QPropertyAnimation(self.Result_button, b"geometry")
        self.anim.setDirection(700)
        self.anim.setStartValue(QRect(260, 460, 93, 31))
        self.anim.setEndValue(QRect(260, 510, 93, 31))
        self.anim.start()
        self.Result_button.setGeometry(QtCore.QRect(260, 460, 93, 31))
        
        self.anim2 = QPropertyAnimation(self.Restart_button, b"geometry")
        self.anim2.setDirection(700)
        self.anim2.setStartValue(QRect(140, 460, 93, 31))
        self.anim2.setEndValue(QRect(360, 510, 93, 31))
        self.anim2.start()
        self.Result_button.setGeometry(QtCore.QRect(140, 460, 93, 31))

        def create_animate(disk, source, destination):
            global help_mile_1
            global help_mile_2
            global help_mile_3
            global speed
            global list_animate

            if destination.objectName() == "mile_1":
                y_help = help_mile_1 -1
            elif destination.objectName() == "mile_2":
                y_help = help_mile_2 -1
            else:
                y_help = help_mile_3 -1

            self.a["anim%s" % number] = QPropertyAnimation(disk, b"geometry")
            self.a["anim%s" % number].setDuration(speed)
            self.a["anim%s" % number].setStartValue(QRect(
                source.x() - (source.x() - disk.x()), disk.y(), disk.width(), disk.height()))
            self.a["anim%s" % number].setEndValue(
                QRect(source.x() - (source.x() - disk.x()), 40, disk.width(), disk.height()))
            geometry_help = QtCore.QRect(
                source.x() - (source.x() - disk.x()), 40, disk.width(), disk.height())
            self.group.addAnimation(self.a["anim%s" % number])
            list_animate.append(self.a["anim%s" % number])

            self.a["anim%s" %
                   (number + 1)] = QPropertyAnimation(disk, b"geometry")
            self.a["anim%s" % (number + 1)].setDuration(speed)
            self.a["anim%s" % (number + 1)].setStartValue(geometry_help)
            self.a["anim%s" % (number + 1)].setEndValue(QRect(destination.x() -
                                                              (source.x() - disk.x()), 40, disk.width(), disk.height()))
            geometry_help = QRect(
                destination.x() - (source.x() - disk.x()), 40, disk.width(), disk.height())
            self.group.addAnimation(self.a["anim%s" % (number + 1)])
            list_animate.append(self.a["anim%s" % (number + 1)])

            self.a["anim%s" %
                   (number + 2)] = QPropertyAnimation(disk, b"geometry")
            self.a["anim%s" % (number + 2)].setDuration(speed)
            self.a["anim%s" % (number + 2)].setStartValue(geometry_help)
            self.a["anim%s" % (number + 2)].setEndValue(QRect(destination.x() - (
                source.x() - disk.x()), 320 - (30*y_help), disk.width(), disk.height()))
            disk.setGeometry(QtCore.QRect(destination.x(
            ) - (source.x() - disk.x()), 320 - (30*y_help) , disk.width(), disk.height()))
            self.group.addAnimation(self.a["anim%s" % (number + 2)])
            list_animate.append(self.a["anim%s" % (number + 2)])
            

        def ExHanoi(A, B, C, n):
            global help_mile_1
            global help_mile_2
            global help_mile_3
            global akharin_diskaye_mile_1
            global akharin_diskaye_mile_2
            global akharin_diskaye_mile_3     
            global number

            if n == 1:

                if C.objectName() == "mile_1":
                    help_mile_1 -= 1
                if C.objectName() == "mile_2":
                    help_mile_2 -= 1
                if C.objectName() == "mile_3":
                    help_mile_3 -= 1

                if B.objectName() == "mile_1":
                    help_mile_1 += 1
                if B.objectName() == "mile_2":
                    help_mile_2 += 1
                if B.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(C + "->" + B)
                if C.objectName() == "mile_3":
                    if B.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if B.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if C.objectName() == "mile_2":
                    if B.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if B.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if C.objectName() == "mile_1":
                    if B.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if B.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(A + "->" + C)
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if B.objectName() == "mile_1":
                    help_mile_1 -= 1
                if B.objectName() == "mile_2":
                    help_mile_2 -= 1
                if B.objectName() == "mile_3":
                    help_mile_3 -= 1

                if A.objectName() == "mile_1":
                    help_mile_1 += 1
                if A.objectName() == "mile_2":
                    help_mile_2 += 1
                if A.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(B + "->" + A)
                if B.objectName() == "mile_3":
                    if A.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if A.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if B.objectName() == "mile_2":
                    if A.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if A.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if B.objectName() == "mile_1":
                    if A.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if A.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if B.objectName() == "mile_1":
                    help_mile_1 -= 1
                if B.objectName() == "mile_2":
                    help_mile_2 -= 1
                if B.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(B + "->" + C)
                if B.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if B.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if B.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1   
                # print(A + "->" + C)
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
            else:
                ExHanoi(A, B, C, n-1)
                TowerOfHanoi(3*n - 2, C, A, B)
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(A + "->" + C)
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                TowerOfHanoi(3*n - 1, B, A, C)

        def TowerOfHanoi(n, A, B, C):
            global help_mile_1
            global help_mile_2
            global help_mile_3
            global akharin_diskaye_mile_1
            global akharin_diskaye_mile_2
            global akharin_diskaye_mile_3
            global number
            
            if n == 1:
                if A.objectName() == "mile_1":
                    help_mile_1 -= 1
                if A.objectName() == "mile_2":
                    help_mile_2 -= 1
                if A.objectName() == "mile_3":
                    help_mile_3 -= 1

                if C.objectName() == "mile_1":
                    help_mile_1 += 1
                if C.objectName() == "mile_2":
                    help_mile_2 += 1
                if C.objectName() == "mile_3":
                    help_mile_3 += 1
                # print(A + "->" + C)    
                if A.objectName() == "mile_3":
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                        del akharin_diskaye_mile_3[-1]
                if A.objectName() == "mile_2":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                    if C.objectName() == "mile_1":
                        create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                        akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                        del akharin_diskaye_mile_2[-1]
                if A.objectName() == "mile_1":
                    if C.objectName() == "mile_3":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                        akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                    if C.objectName() == "mile_2":
                        create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                        akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                        del akharin_diskaye_mile_1[-1]
                number += 3
                return
            TowerOfHanoi(n-1, A, 
            C, B)
            if A.objectName() == "mile_1":
                help_mile_1 -= 1
            if A.objectName() == "mile_2":
                help_mile_2 -= 1
            if A.objectName() == "mile_3":
                help_mile_3 -= 1

            if C.objectName() == "mile_1":
                help_mile_1 += 1
            if C.objectName() == "mile_2":
                help_mile_2 += 1
            if C.objectName() == "mile_3":
                help_mile_3 += 1
            # print(A + "->" + C)
            if A.objectName() == "mile_3":
                if C.objectName() == "mile_2":
                    create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_2)
                    akharin_diskaye_mile_2.append(akharin_diskaye_mile_3[-1])
                    del akharin_diskaye_mile_3[-1]
                if C.objectName() == "mile_1":
                    create_animate(akharin_diskaye_mile_3[-1],self.mile_3,self.mile_1)
                    akharin_diskaye_mile_1.append(akharin_diskaye_mile_3[-1])
                    del akharin_diskaye_mile_3[-1]
            if A.objectName() == "mile_2":
                if C.objectName() == "mile_3":
                    create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_3)
                    akharin_diskaye_mile_3.append(akharin_diskaye_mile_2[-1])
                    del akharin_diskaye_mile_2[-1]
                if C.objectName() == "mile_1":
                    create_animate(akharin_diskaye_mile_2[-1],self.mile_2,self.mile_1)
                    akharin_diskaye_mile_1.append(akharin_diskaye_mile_2[-1])
                    del akharin_diskaye_mile_2[-1]
            if A.objectName() == "mile_1":
                if C.objectName() == "mile_3":
                    create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_3)
                    akharin_diskaye_mile_3.append(akharin_diskaye_mile_1[-1])
                    del akharin_diskaye_mile_1[-1]
                if C.objectName() == "mile_2":
                    create_animate(akharin_diskaye_mile_1[-1],self.mile_1,self.mile_2)
                    akharin_diskaye_mile_2.append(akharin_diskaye_mile_1[-1])
                    del akharin_diskaye_mile_1[-1]
            # global number
            number += 3
            TowerOfHanoi(n-1, B, A, C)

        self.group = QSequentialAnimationGroup()
        global list_animate
        list_animate = [] 
        global number
        number = 1
        global help_mile_1
        global help_mile_2
        global help_mile_3
        global akharin_diskaye_mile_1
        global akharin_diskaye_mile_2
        global akharin_diskaye_mile_3
        akharin_diskaye_mile_1 = [self.disk_1, self.disk_2, self.disk_3]
        akharin_diskaye_mile_2 = [self.disk_4, self.disk_5, self.disk_6]
        akharin_diskaye_mile_3 = [self.disk_7, self.disk_8, self.disk_9]
        global Tedad
        if Tedad == 3:
            help_mile_1 = 3
            help_mile_2 = 3
            help_mile_3 = 3
            
            
        elif Tedad == 2:
            del akharin_diskaye_mile_1[-1]
            del akharin_diskaye_mile_2[-1]
            del akharin_diskaye_mile_3[-1]
            
            help_mile_1 = 2
            help_mile_2 = 2
            help_mile_3 = 2
        else:
            del akharin_diskaye_mile_1[-1]
            del akharin_diskaye_mile_1[-1]
            del akharin_diskaye_mile_2[-1]
            del akharin_diskaye_mile_2[-1]
            del akharin_diskaye_mile_3[-1]
            del akharin_diskaye_mile_3[-1]          

            help_mile_1 = 1
            help_mile_2 = 1
            help_mile_3 = 1

        self.a = {}
        ExHanoi(self.mile_1, self.mile_2, self.mile_3, Tedad)

        self.disk_1.setGeometry(QtCore.QRect(110, 320, 151, 21))
        self.disk_2.setGeometry(QtCore.QRect(125, 290, 121, 21))
        self.disk_3.setGeometry(QtCore.QRect(140, 260, 91, 21))
        self.disk_4.setGeometry(QtCore.QRect(295, 320, 141, 21))
        self.disk_5.setGeometry(QtCore.QRect(310, 290, 111, 21))
        self.disk_6.setGeometry(QtCore.QRect(325, 260, 81, 21))
        self.disk_7.setGeometry(QtCore.QRect(480, 320, 131, 21))
        self.disk_8.setGeometry(QtCore.QRect(495, 290, 101, 21))
        self.disk_9.setGeometry(QtCore.QRect(510, 260, 71, 21))
        global help_harekat
        help_harekat = 0
        


            
        
    def next_move(self):
        global list_animate
        global help_harekat
        self.groupp = QSequentialAnimationGroup()
        self.groupp.addAnimation(list_animate[help_harekat])
        self.groupp.addAnimation(list_animate[help_harekat + 1])
        self.groupp.addAnimation(list_animate[help_harekat + 2])
        self.groupp.start()
        help_harekat += 3
        

    def One(self):
        global Tedad
        Tedad = 1
        self.disk_1.setVisible(True)
        self.disk_4.setVisible(True)
        self.disk_7.setVisible(True)
        self.One_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #C8C6C6; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 21px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        """)

    def Two(self):
        global Tedad
        Tedad = 2
        self.disk_1.setVisible(True)
        self.disk_2.setVisible(True)
        self.disk_4.setVisible(True)
        self.disk_5.setVisible(True)
        self.disk_7.setVisible(True)
        self.disk_8.setVisible(True)
        self.Two_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #C8C6C6; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 21px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        """)

    def Three(self):
        global Tedad
        Tedad = 3
        self.disk_1.setVisible(True)
        self.disk_2.setVisible(True)
        self.disk_3.setVisible(True)
        self.disk_4.setVisible(True)
        self.disk_5.setVisible(True)
        self.disk_6.setVisible(True)
        self.disk_7.setVisible(True)
        self.disk_8.setVisible(True)
        self.disk_9.setVisible(True)
        self.Three_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #C8C6C6; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 21px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        """)


    def slow(self):

        global speed
        speed = 1000
        self.Slow_button.setStyleSheet("""
                                        QPushButton{
                                        font-size: 21px;
                                        background-color : #77D970;
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        """)
    def normal(self):

        global speed
        speed = 500
        self.Normal_button.setStyleSheet("""

                                        QPushButton{
                                        font-size: 21px;
                                        background-color : #FDCA40;
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        """)
    def fast(self):
        global speed
        speed = 10
        self.Fast_button.setStyleSheet("""
                                        QPushButton{
                                        font-size: 21px;
                                        background-color : #FF3F00;
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        """)
        
    def pause_animate(self):
        self.group.pause()
        self.anim.pause()
        self.anim2.pause()

    def resume_animate(self):
        self.group.resume()

    def result(self):
        self.pause_animate()
        if Tedad == 1:
            self.disk_1.setGeometry(QtCore.QRect(470, 320, 151, 21))
            self.disk_4.setGeometry(QtCore.QRect(475, 290, 141, 21))
            self.disk_7.setGeometry(QtCore.QRect(480, 260, 131, 21))
        if Tedad == 2:
            self.disk_1.setGeometry(QtCore.QRect(470, 320, 151, 21))
            self.disk_2.setGeometry(QtCore.QRect(485, 230, 121, 21))
            self.disk_4.setGeometry(QtCore.QRect(475, 290, 141, 21))
            self.disk_5.setGeometry(QtCore.QRect(490, 200, 111, 21))
            self.disk_7.setGeometry(QtCore.QRect(480, 260, 131, 21))
            self.disk_8.setGeometry(QtCore.QRect(495, 170, 101, 21))
        if Tedad == 3:
            self.disk_1.setGeometry(QtCore.QRect(470, 320, 151, 21))
            self.disk_2.setGeometry(QtCore.QRect(485, 230, 121, 21))
            self.disk_3.setGeometry(QtCore.QRect(500, 140, 91, 21))
            self.disk_4.setGeometry(QtCore.QRect(475, 290, 141, 21))
            self.disk_5.setGeometry(QtCore.QRect(490, 200, 111, 21))
            self.disk_6.setGeometry(QtCore.QRect(505, 110, 81, 21))
            self.disk_7.setGeometry(QtCore.QRect(480, 260, 131, 21))
            self.disk_8.setGeometry(QtCore.QRect(495, 170, 101, 21))
            self.disk_9.setGeometry(QtCore.QRect(510, 80, 71, 21))

    def restart_animate(self):
        self.Manual_button.setVisible(True)
        self.Next_button.setVisible(False)
        self.Automatic_button.setVisible(True)
        self.Pause_button.setVisible(False)
        self.Resume_button.setVisible(False)
        self.disk_1.setVisible(False)
        self.disk_2.setVisible(False)
        self.disk_3.setVisible(False)
        self.disk_4.setVisible(False)
        self.disk_5.setVisible(False)
        self.disk_6.setVisible(False)
        self.disk_7.setVisible(False)
        self.disk_8.setVisible(False)
        self.disk_9.setVisible(False)
        self.pause_animate()
        self.disk_1.setGeometry(QtCore.QRect(110, 320, 151, 21))
        self.disk_2.setGeometry(QtCore.QRect(125, 290, 121, 21))
        self.disk_3.setGeometry(QtCore.QRect(140, 260, 91, 21))
        self.disk_4.setGeometry(QtCore.QRect(295, 320, 141, 21))
        self.disk_5.setGeometry(QtCore.QRect(310, 290, 111, 21))
        self.disk_6.setGeometry(QtCore.QRect(325, 260, 81, 21))
        self.disk_7.setGeometry(QtCore.QRect(480, 320, 131, 21))
        self.disk_8.setGeometry(QtCore.QRect(495, 290, 101, 21))
        self.disk_9.setGeometry(QtCore.QRect(510, 260, 71, 21))

        self.Result_button.setGeometry(QtCore.QRect(260, 510, 93, 31))
        self.Restart_button.setGeometry(QtCore.QRect(380, 510, 93, 31))

        self.One_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #C8C6C6;
                                            
                                        }
                                        """)
        self.Two_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #C8C6C6;
                                            
                                        }
                                        """)
        self.Three_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #536162; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #C8C6C6;
                                            
                                        }
                                        """)
        self.Slow_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #77D970; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #77D970;
                                        }
        
                                        """)
        self.Normal_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #FDCA40; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #FDCA40;
                                        }
        
                                        """)
        self.Fast_button.setStyleSheet("""
                                        QPushButton{
                                        background-color: #FF3F00; 
                                        border: none;
                                        color: white;
                                        text-align: center;
                                        text-decoration: none;
                                        display: inline-block;
                                        font-size: 16px;
                                        border-radius: 8px;
                                        color: black;
                                        }
                                        QPushButton::hover{
                                            font-size: 21px;
                                            background-color : #FF3F00;
                                            
                                        }
                                        """)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowIcon(QtGui.QIcon('logo2.ico'))
    MainWindow.show()
    sys.exit(app.exec_())
